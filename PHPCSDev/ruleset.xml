<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PHPCSDev" xsi:noNamespaceSchemaLocation="https://schema.phpcodesniffer.com/phpcs.xsd">

    <description>A PSR-12 based standard for use by sniff developers to check the code style of external PHPCS standards</description>

    <!--
    ####################################################################
    PHP: Check PHP cross version compatibility.
    For optimal results, the custom project ruleset should set the testVersion
    config variable.
    For compatibility with the PHP version supported by PHP_CodeSniffer 3.0+,
    this would typically be set like: <config name="testVersion" value="5.4-"/>.
    ####################################################################
    -->
    <rule ref="PHPCompatibility">
        <exclude name="PHPCompatibility.Constants.NewConstants.t_finallyFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_yieldFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_ellipsisFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_powFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_pow_equalFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_spaceshipFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_coalesceFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_coalesce_equalFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_yield_fromFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_bad_characterFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_fnFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_matchFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_nullsafe_object_operatorFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_name_fully_qualifiedFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_name_qualifiedFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_name_relativeFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_readonlyFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_enumFound"/>
        <exclude name="PHPCompatibility.Constants.RemovedConstants.t_bad_characterFound"/>
    </rule>


    <!--
    ####################################################################
    Code style: Check style for compliance with PSR12.
    ####################################################################
    -->
    <rule ref="PSR12">
        <!-- As PHP 5.4 is the minimum supported PHP version for PHP_CodeSniffer and
             most external standards, adding constant visibility is not (yet) an option. -->
        <exclude name="PSR12.Properties.ConstantVisibility"/>

        <!-- Allow for the first condition of a multi-line control structure to be on the same line
             as the control structure keyword. -->
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine"/>

        <!-- This standard enforces a blank line before each function, which conflicts with this
             PHPCS 3.6.2+ PSR12 sniff when a function is the first content of a class. -->
        <exclude name="PSR12.Classes.OpeningBraceSpace.Found"/>
    </rule>


    <!--
    ####################################################################
    Code style: Naming Conventions.
    ####################################################################
    -->

    <!-- Check that variable names are in camelCase. -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>

    <!-- Check that function and method names are in camelCase. -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <!-- Allow for two adjacent capital letters for acronyms. -->
            <property name="strict" value="false"/>
        </properties>
    </rule>


    <!--
    ####################################################################
    Code style: Various other additions.
    ####################################################################
    -->

    <!-- PSR12 doesn't enforce consistency in where boolean operators are placed. We do. -->
    <rule ref="PSR12.ControlStructures.BooleanOperatorPlacement">
        <properties>
            <property name="allowOnly" value="first"/>
        </properties>
    </rule>

    <!-- PSR12 appears to ignore blank lines for superfluous whitespace and in several other places. Let's fix that. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>5</severity>
    </rule>

    <!-- Ensure exactly one blank line before each property declaration. -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

    <!-- Ensure exactly one blank line before each function declaration and 0 after the last. -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="1"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>

    <!-- No spacing on the inside of arbitrary parentheses. -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing"/>

    <!-- No spacing inside heredoc/nowdocs identifiers. -->
    <rule ref="Generic.WhiteSpace.HereNowdocIdentifierSpacing"/>

    <!-- Align the equal operator in assignment blocks. -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="25"/>
        </properties>
    </rule>

    <!-- Prefer include_once/require_once over include/require. -->
    <rule ref="PEAR.Files.IncludingFile"/>
    <rule ref="PEAR.Files.IncludingFile.UseInclude">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseIncludeOnce">
        <severity>0</severity>
    </rule>

    <!-- Disallow Yoda conditions. -->
    <rule ref="Generic.ControlStructures.DisallowYodaConditions"/>

    <!-- Use self or static when referring to the class in use. -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <!-- Only one object structure per file. -->
    <rule ref="Generic.Files.OneObjectStructurePerFile"/>


    <!--
    ####################################################################
    Code style: Array declarations.
    ####################################################################
    -->

    <!-- Enforce short array syntax. -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Use normalized array indentation. -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration"/>

    <!-- Ignoring the Squiz indentation rules as normalized arrays are preferred. -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>

    <!-- Single and multi-line arrays are both allowed. -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed">
        <severity>0</severity>
    </rule>


    <!--
    ####################################################################
    Docs: Verify the documentation.
    ####################################################################
    -->

    <rule ref="Generic.Commenting.DocComment">
        <!-- Having a @see or @internal tag before the @param tags is fine. -->
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
    </rule>

    <rule ref="PEAR.Commenting">
        <!-- Exclude PEAR specific tag requirements. -->
        <exclude name="PEAR.Commenting.FileComment.MissingVersion"/>
        <exclude name="PEAR.Commenting.FileComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag"/>

        <!-- Having a @see or @internal tag before the @category tag is fine. -->
        <exclude name="PEAR.Commenting.ClassComment.CategoryTagOrder"/>

        <!-- Using @since for class changelog demands multiple tags. -->
        <exclude name="PEAR.Commenting.ClassComment.DuplicateSinceTag"/>
    </rule>


    <!--
    ####################################################################
    Code Analysis additions.
    ####################################################################
    -->

    <!-- Efficiency: don't use function calls within the condition of a for loop. -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

    <!-- Efficiency: don't use size functions within a loop. -->
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>

    <!-- Efficiency: don't unnecessarily use double quotes. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>

    <!-- Efficiency: don't unnecessarily use heredocs. -->
    <rule ref="Generic.Strings.UnnecessaryHeredoc"/>

    <!-- Error prevention: warns when an inner loop uses the same incrementor as the outer loop. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <!-- Error prevention: don't assign from within a condition. -->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition">
        <exclude name="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>
    </rule>

    <!-- Error prevention: use parentheses when mixing boolean operators. -->
    <rule ref="Generic.CodeAnalysis.RequireExplicitBooleanOperatorPrecedence"/>

    <!-- Clean up: remove redundant code. -->
    <rule ref="Squiz.PHP.NonExecutableCode">
        <!-- Allow for return statement in otherwise empty function. -->
        <exclude name="Squiz.PHP.NonExecutableCode.ReturnNotRequired"/>
    </rule>

    <!-- Clean up: no empty statements. -->
    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>

    <!-- Parse error prevention: guard against merge conflict artifacts. -->
    <rule ref="Generic.VersionControl.GitMergeConflict"/>

</ruleset>
