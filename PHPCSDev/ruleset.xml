<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="PHPCSDev" xsi:noNamespaceSchemaLocation="https://schema.phpcodesniffer.com/phpcs.xsd">

    <description>A PSR-12 based standard for use by sniff developers to check the code style of external PHPCS standards</description>

    <!--
    ####################################################################
    PHP: Check PHP cross version compatibility.
    For optimal results, the custom project ruleset should set the testVersion
    config variable.
    For compatibility with the PHP version supported by PHP_CodeSniffer 3.0+,
    this would typically be set like: <config name="testVersion" value="5.4-"/>.
    ####################################################################
    -->
    <rule ref="PHPCompatibility">
        <exclude name="PHPCompatibility.Constants.NewConstants.t_finallyFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_yieldFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_ellipsisFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_powFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_pow_equalFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_spaceshipFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_coalesceFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_coalesce_equalFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_yield_fromFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_bad_characterFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_fnFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_attributeFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_matchFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_nullsafe_object_operatorFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_name_fully_qualifiedFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_name_qualifiedFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_name_relativeFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_readonlyFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_enumFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_public_setFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_protected_setFound"/>
        <exclude name="PHPCompatibility.Constants.NewConstants.t_private_setFound"/>
        <exclude name="PHPCompatibility.Constants.RemovedConstants.t_bad_characterFound"/>
    </rule>


    <!--
    ####################################################################
    PHP: Modernize a codebase when possible.
    ####################################################################
    -->

    <rule ref="Modernize.FunctionCalls.Dirname.FileConstant"/>


    <!--
    ####################################################################
    Code style: Check style for compliance with PSR12.
    ####################################################################
    -->
    <rule ref="PSR12">
        <!-- As PHP 5.4 is the minimum supported PHP version for PHP_CodeSniffer and
             most external standards, adding constant visibility is not (yet) an option. -->
        <exclude name="PSR12.Properties.ConstantVisibility"/>

        <!-- Allow for file docblock on the line directly following the PHP open tag. -->
        <exclude name="PSR12.Files.FileHeader.SpacingAfterTagBlock"/>

        <!-- Allow for the first condition of a multi-line control structure to be on the same line
             as the control structure keyword. -->
        <exclude name="PSR12.ControlStructures.ControlStructureSpacing.FirstExpressionLine"/>

        <!-- This standard enforces a blank line before each function, which conflicts with this
             PHPCS 3.6.2+ PSR12 sniff when a function is the first content of a class. -->
        <exclude name="PSR12.Classes.OpeningBraceSpace.Found"/>
    </rule>


    <!--
    ####################################################################
    Code style: Naming Conventions.
    ####################################################################
    -->

    <!-- Check that variable names are in camelCase. -->
    <rule ref="Squiz.NamingConventions.ValidVariableName">
        <exclude name="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore"/>
    </rule>

    <!-- Check that function and method names are in camelCase. -->
    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <!-- Allow for two adjacent capital letters for acronyms. -->
            <property name="strict" value="false"/>
        </properties>
    </rule>

    <!-- Prevent PHP 8 named parameters confusion. -->
    <rule ref="Universal.NamingConventions.NoReservedKeywordParameterNames"/>


    <!--
    ####################################################################
    Code style: Various other additions.
    Some of these rules will probably be enforced via PERCS once it is available, but we already want to use them.
    ####################################################################
    -->

    <!-- Enforce lowercase PHP tags. -->
    <rule ref="Universal.PHP.LowercasePHPTag"/>

    <!-- Enforce consistency in import use statements. -->
    <rule ref="Universal.UseStatements.NoLeadingBackslash"/>
    <rule ref="Universal.UseStatements.KeywordSpacing"/>
    <rule ref="Universal.UseStatements.LowercaseFunctionConst"/>

    <!-- Consistent modifier keyword order. PSR12 currently only enforces this for property declarations. -->
    <rule ref="Universal.Classes.ModifierKeywordOrder"/>
    <rule ref="Universal.Constants.ModifierKeywordOrder"/>

    <!-- PSR12 doesn't enforce consistency in where boolean operators are placed. We do. -->
    <rule ref="PSR12.ControlStructures.BooleanOperatorPlacement">
        <properties>
            <property name="allowOnly" value="first"/>
        </properties>
    </rule>

    <!-- Same thing, but then for multi-line concatenation in statements. -->
    <rule ref="Universal.Operators.ConcatPosition">
        <properties>
            <property name="allowOnly" value="start"/>
        </properties>
    </rule>

    <!-- PSR12 appears to ignore blank lines for superfluous whitespace and in several other places. Let's fix that. -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.StartFile">
        <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EndFile">
        <severity>5</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <severity>5</severity>
    </rule>

    <!-- Ensure exactly one blank line before each property declaration. -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>

    <!-- Ensure exactly one blank line before each function declaration and 0 after the last. -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="1"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>

    <!-- No spacing on the inside of arbitrary parentheses. -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing"/>

    <!-- No spacing inside heredoc/nowdocs identifiers. -->
    <rule ref="Generic.WhiteSpace.HereNowdocIdentifierSpacing"/>

    <!-- No spaces around type operators. -->
    <rule ref="Universal.Operators.TypeSeparatorSpacing"/>

    <!-- Always use parentheses when instantiating anonymous classes. -->
    <rule ref="Universal.Classes.RequireAnonClassParentheses"/>

    <!-- No space between the class keyword and the open parentheses for anonymous classes. -->
    <rule ref="Universal.WhiteSpace.AnonClassKeywordSpacing"/>

    <!-- Enforce consistent spacing around commas (no space before, one space or new line after). -->
    <rule ref="Universal.WhiteSpace.CommaSpacing">
        <exclude name="Universal.WhiteSpace.CommaSpacing.TooMuchSpaceAfterCommaBeforeTrailingComment"/>
    </rule>

    <!-- Disallow precision alignment (indentation). -->
    <rule ref="Universal.WhiteSpace.PrecisionAlignment"/>

    <!-- Align the equal operator in assignment blocks. -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">
        <properties>
            <property name="maxPadding" value="25"/>
        </properties>
    </rule>

    <!-- Prefer include_once/require_once over include/require. -->
    <rule ref="PEAR.Files.IncludingFile"/>
    <rule ref="PEAR.Files.IncludingFile.UseInclude">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Files.IncludingFile.UseIncludeOnce">
        <severity>0</severity>
    </rule>

    <!-- Disallow Yoda conditions. -->
    <rule ref="Generic.ControlStructures.DisallowYodaConditions"/>

    <!-- Disallow alternative syntax for control structures. -->
    <rule ref="Universal.ControlStructures.DisallowAlternativeSyntax"/>

    <!-- Use self or static when referring to the class in use. -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>
    <rule ref="Universal.CodeAnalysis.StaticInFinalClass"/>

    <!-- Only one namespace per file. -->
    <rule ref="Universal.Namespaces.OneDeclarationPerFile"/>

    <!-- Don't allow curly brace syntax for namespace declarations. -->
    <rule ref="Universal.Namespaces.DisallowCurlyBraceSyntax"/>

    <!-- Only one object structure per file. -->
    <rule ref="Generic.Files.OneObjectStructurePerFile"/>

    <!-- And don't mix OO declarations and function declarations in one file. -->
    <rule ref="Universal.Files.SeparateFunctionsFromOO"/>

    <!-- Disallow non-strict comparisons and the use of the not operator. -->
    <rule ref="Squiz.Operators.ComparisonOperatorUsage">
        <exclude name="Squiz.Operators.ComparisonOperatorUsage.ImplicitTrue"/>
    </rule>

    <!-- Enforce lowercase ::class. -->
    <rule ref="Universal.Constants.LowercaseClassResolutionKeyword"/>

    <!-- PHP native magic constants should be uppercase. -->
    <rule ref="Universal.Constants.UppercaseMagicConstants"/>

    <!-- Alphabetize lists of extended and implemented interfaces. -->
    <rule ref="Universal.OOStructures.AlphabeticExtendsImplements"/>

    <!-- Disallow the use of fully qualified true/false/null. -->
    <rule ref="Universal.PHP.NoFQNTrueFalseNull"/>

    <!-- Prevent really long lists with all (global) functions/constants used in a file. -->
    <rule ref="Universal.UseStatements.DisallowUseConst"/>
    <rule ref="Universal.UseStatements.DisallowUseFunction"/>


    <!--
    ####################################################################
    Code style: Array declarations.
    ####################################################################
    -->

    <!-- This (incomplete) ruleset may cause some duplication for now, but that will be fixed once
         the ruleset is completed and we can remove the `Squiz.Arrays.ArrayDeclaration` sniff. -->
    <rule ref="NormalizedArrays"/>

    <!-- Enforce short array syntax. -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Use normalized array indentation. -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration"/>

    <!-- Ignoring the Squiz indentation rules as normalized arrays are preferred. -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>

    <!-- Single and multi-line arrays are both allowed. -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed">
        <severity>0</severity>
    </rule>


    <!--
    ####################################################################
    Docs: Verify the documentation.
    ####################################################################
    -->

    <rule ref="Generic.Commenting.DocComment">
        <!-- Having a @see or @internal tag before the @param tags is fine. -->
        <exclude name="Generic.Commenting.DocComment.ParamNotFirst"/>
    </rule>

    <rule ref="PEAR.Commenting">
        <!-- Exclude PEAR specific tag requirements. -->
        <exclude name="PEAR.Commenting.FileComment.MissingVersion"/>
        <exclude name="PEAR.Commenting.FileComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLicenseTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.ClassComment.MissingPackageTag"/>

        <!-- Having a @see or @internal tag before the @category tag is fine. -->
        <exclude name="PEAR.Commenting.ClassComment.CategoryTagOrder"/>

        <!-- Using @since for file/class changelog demands multiple tags. -->
        <exclude name="PEAR.Commenting.FileComment.DuplicateSinceTag"/>
        <exclude name="PEAR.Commenting.ClassComment.DuplicateSinceTag"/>
    </rule>


    <!--
    ####################################################################
    PHPCS compatibility additions.
    ####################################################################
    -->

    <!-- The PHPCS autoloader does not handle sniffs which extends other sniffs well, so prevent problems by making all sniffs final. -->
    <rule ref="Universal.Classes.RequireFinalClass"/>

    <!-- Enforce methods in traits to be final to prevent (accidental) overloading. -->
    <rule ref="Universal.FunctionDeclarations.RequireFinalMethodsInTraits"/>


    <!--
    ####################################################################
    Code Analysis additions.
    ####################################################################
    -->

    <!-- Testability: long closures make for code which is more difficult to test. -->
    <rule ref="Universal.FunctionDeclarations.NoLongClosures">
        <!-- Disable the warning after 5 lines, only have the error after 8 lines. -->
        <properties>
            <property name="recommendedLines " value="1000"/>
        </properties>
    </rule>

    <!-- Efficiency: don't use function calls within the condition of a for loop. -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

    <!-- Efficiency: don't use size functions within a loop. -->
    <rule ref="Squiz.PHP.DisallowSizeFunctionsInLoops"/>

    <!-- Efficiency: don't unnecessarily use double quotes. -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired"/>

    <!-- Efficiency: don't unnecessarily use heredocs. -->
    <rule ref="Generic.Strings.UnnecessaryHeredoc"/>

    <!-- Efficiency: simplify code when possible. -->
    <rule ref="Universal.CodeAnalysis.NoEchoSprintf"/>

    <!-- Error prevention: warns when an inner loop uses the same incrementor as the outer loop. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <!-- Error prevention: don't assign from within a condition. -->
    <rule ref="Generic.CodeAnalysis.AssignmentInCondition">
        <exclude name="Generic.CodeAnalysis.AssignmentInCondition.FoundInWhileCondition"/>
    </rule>

    <!-- Error prevention: use parentheses when mixing boolean operators. -->
    <rule ref="Generic.CodeAnalysis.RequireExplicitBooleanOperatorPrecedence"/>

    <!-- Error prevention: Don't allow mixed arrays (keyed/non-keyed). -->
    <rule ref="Universal.Arrays.MixedKeyedUnkeyedArray"/>

    <!-- Error prevention: Don't allow mixed arrays (integer/string keys). -->
    <rule ref="Universal.Arrays.MixedArrayKeyTypes"/>

    <!-- Error prevention: Prevent issues with duplicate arrays keys. -->
    <rule ref="Universal.Arrays.DuplicateArrayKey"/>

    <!-- Error prevention: Prevent issues with precedent order. -->
    <rule ref="Universal.Operators.DisallowLogicalAndOr"/>

    <!-- Error prevention: Prevent logic errors as most devs don't understand short ternary well enough. -->
    <rule ref="Universal.Operators.DisallowShortTernary"/>

    <!-- Error prevention: Prevent issues when in/decremented variables get moved around and are suddenly no longer stand-alone. -->
    <rule ref="Universal.Operators.DisallowStandalonePostIncrementDecrement"/>

    <!-- Error prevention: Prevent creation of constructor/destructors which will not work as expected. -->
    <rule ref="Universal.CodeAnalysis.ConstructorDestructorReturn"/>

    <!-- Error prevention: Prevent unpredictable code behaviour. -->
    <rule ref="Universal.CodeAnalysis.ForeachUniqueAssignment"/>

    <!-- Error prevention: Prevent incomprehensible code. -->
    <rule ref="Universal.CodeAnalysis.NoDoubleNegative"/>

    <!-- Error prevention: don't allow people to do silly things. -->
    <rule ref="Universal.PHP.OneStatementInShortEchoTag"/>

    <!-- Clean up: remove redundant code. -->
    <rule ref="Squiz.PHP.NonExecutableCode">
        <!-- Allow for return statement in otherwise empty function. -->
        <exclude name="Squiz.PHP.NonExecutableCode.ReturnNotRequired"/>
    </rule>

    <!-- Clean up: no empty statements. -->
    <rule ref="Generic.CodeAnalysis.EmptyPHPStatement"/>

    <!-- Clean up: no lonely if statements. -->
    <rule ref="Universal.ControlStructures.DisallowLonelyIf"/>

    <!-- Clean up: no useless aliases in import use statements. -->
    <rule ref="Universal.UseStatements.NoUselessAliases"/>

    <!-- Parse error prevention: guard against merge conflict artifacts. -->
    <rule ref="Generic.VersionControl.GitMergeConflict"/>

    <!-- Lower cognitive load. -->
    <rule ref="Universal.UseStatements.DisallowMixedGroupUse"/>

</ruleset>
